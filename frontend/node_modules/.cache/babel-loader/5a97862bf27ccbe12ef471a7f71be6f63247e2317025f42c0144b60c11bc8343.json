{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { apiHelpers } from '../utils/api';\n\n// const ConnectionTest = () => {\n//   const [connectionStatus, setConnectionStatus] = useState('testing');\n//   const [backendInfo, setBackendInfo] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   const testConnection = async () => {\n//     try {\n//       setConnectionStatus('testing');\n//       setError(null);\n\n//       console.log('Testing connection to backend...');\n\n//       // Test basic connection\n//       const response = await apiHelpers.testConnection();\n//       console.log('Backend response:', response.data);\n\n//       setBackendInfo(response.data);\n//       setConnectionStatus('connected');\n\n//     } catch (error) {\n//       console.error('Connection test failed:', error);\n//       setError(error.message);\n//       setConnectionStatus('failed');\n//     }\n//   };\n\n//   useEffect(() => {\n//     testConnection();\n//   }, []);\n\n//   const testSignup = async () => {\n//     try {\n//       const testData = {\n//         name: 'Test User',\n//         email: `test${Date.now()}@example.com`,\n//         mobile: `98765${Math.floor(Math.random() * 10000)}`,\n//         password: 'Test123'\n//       };\n\n//       console.log('Testing signup with:', testData);\n//       const response = await apiHelpers.signup(testData);\n//       console.log('Signup test result:', response.data);\n//       alert('Signup test successful!');\n\n//     } catch (error) {\n//       console.error('Signup test failed:', error);\n//       alert(`Signup test failed: ${error.response?.data?.message || error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"fixed top-4 right-4 bg-white border border-gray-300 rounded-lg p-4 shadow-lg z-50 max-w-sm\">\n//       <h3 className=\"font-bold text-lg mb-3\">Connection Test</h3>\n\n//       <div className=\"space-y-2\">\n//         <div className=\"flex items-center space-x-2\">\n//           <span>Status:</span>\n//           <span className={`px-2 py-1 rounded text-sm ${\n//             connectionStatus === 'connected' ? 'bg-green-100 text-green-800' :\n//             connectionStatus === 'failed' ? 'bg-red-100 text-red-800' :\n//             'bg-yellow-100 text-yellow-800'\n//           }`}>\n//             {connectionStatus}\n//           </span>\n//         </div>\n\n//         {backendInfo && (\n//           <div className=\"text-xs text-gray-600\">\n//             <div>Port: {backendInfo.port}</div>\n//             <div>Env: {backendInfo.environment}</div>\n//             <div>Time: {new Date(backendInfo.timestamp).toLocaleTimeString()}</div>\n//           </div>\n//         )}\n\n//         {error && (\n//           <div className=\"text-xs text-red-600 bg-red-50 p-2 rounded\">\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"flex space-x-2 pt-2\">\n//           <button\n//             onClick={testConnection}\n//             className=\"px-3 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600\"\n//           >\n//             Retry\n//           </button>\n\n//           {connectionStatus === 'connected' && (\n//             <button\n//               onClick={testSignup}\n//               className=\"px-3 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600\"\n//             >\n//               Test Signup\n//             </button>\n//           )}\n//         </div>\n\n//         <div className=\"text-xs text-gray-500 mt-2\">\n//           Expected: http://localhost:8000\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ConnectionTest;","map":{"version":3,"names":[],"sources":["C:/Users/jyoti/codefiles/chat_app/frontend/src/components/ConnectionTest.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { apiHelpers } from '../utils/api';\r\n\r\n// const ConnectionTest = () => {\r\n//   const [connectionStatus, setConnectionStatus] = useState('testing');\r\n//   const [backendInfo, setBackendInfo] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const testConnection = async () => {\r\n//     try {\r\n//       setConnectionStatus('testing');\r\n//       setError(null);\r\n      \r\n//       console.log('Testing connection to backend...');\r\n      \r\n//       // Test basic connection\r\n//       const response = await apiHelpers.testConnection();\r\n//       console.log('Backend response:', response.data);\r\n      \r\n//       setBackendInfo(response.data);\r\n//       setConnectionStatus('connected');\r\n      \r\n//     } catch (error) {\r\n//       console.error('Connection test failed:', error);\r\n//       setError(error.message);\r\n//       setConnectionStatus('failed');\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     testConnection();\r\n//   }, []);\r\n\r\n//   const testSignup = async () => {\r\n//     try {\r\n//       const testData = {\r\n//         name: 'Test User',\r\n//         email: `test${Date.now()}@example.com`,\r\n//         mobile: `98765${Math.floor(Math.random() * 10000)}`,\r\n//         password: 'Test123'\r\n//       };\r\n      \r\n//       console.log('Testing signup with:', testData);\r\n//       const response = await apiHelpers.signup(testData);\r\n//       console.log('Signup test result:', response.data);\r\n//       alert('Signup test successful!');\r\n      \r\n//     } catch (error) {\r\n//       console.error('Signup test failed:', error);\r\n//       alert(`Signup test failed: ${error.response?.data?.message || error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"fixed top-4 right-4 bg-white border border-gray-300 rounded-lg p-4 shadow-lg z-50 max-w-sm\">\r\n//       <h3 className=\"font-bold text-lg mb-3\">Connection Test</h3>\r\n      \r\n//       <div className=\"space-y-2\">\r\n//         <div className=\"flex items-center space-x-2\">\r\n//           <span>Status:</span>\r\n//           <span className={`px-2 py-1 rounded text-sm ${\r\n//             connectionStatus === 'connected' ? 'bg-green-100 text-green-800' :\r\n//             connectionStatus === 'failed' ? 'bg-red-100 text-red-800' :\r\n//             'bg-yellow-100 text-yellow-800'\r\n//           }`}>\r\n//             {connectionStatus}\r\n//           </span>\r\n//         </div>\r\n\r\n//         {backendInfo && (\r\n//           <div className=\"text-xs text-gray-600\">\r\n//             <div>Port: {backendInfo.port}</div>\r\n//             <div>Env: {backendInfo.environment}</div>\r\n//             <div>Time: {new Date(backendInfo.timestamp).toLocaleTimeString()}</div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {error && (\r\n//           <div className=\"text-xs text-red-600 bg-red-50 p-2 rounded\">\r\n//             {error}\r\n//           </div>\r\n//         )}\r\n\r\n//         <div className=\"flex space-x-2 pt-2\">\r\n//           <button\r\n//             onClick={testConnection}\r\n//             className=\"px-3 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600\"\r\n//           >\r\n//             Retry\r\n//           </button>\r\n          \r\n//           {connectionStatus === 'connected' && (\r\n//             <button\r\n//               onClick={testSignup}\r\n//               className=\"px-3 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600\"\r\n//             >\r\n//               Test Signup\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"text-xs text-gray-500 mt-2\">\r\n//           Expected: http://localhost:8000\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ConnectionTest;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}