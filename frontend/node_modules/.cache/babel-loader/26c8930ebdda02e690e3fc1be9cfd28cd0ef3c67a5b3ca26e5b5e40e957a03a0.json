{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jyoti\\\\codefiles\\\\chat_app\\\\frontend\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const {\n    user,\n    token\n  } = useAuth();\n\n  // Initialize socket connection\n  useEffect(() => {\n    if (user && token) {\n      const newSocket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:8000', {\n        auth: {\n          token: token\n        },\n        transports: ['websocket', 'polling']\n      });\n      setSocket(newSocket);\n\n      // Connection event handlers\n      newSocket.on('connect', () => {\n        console.log('✅ Socket connected:', newSocket.id);\n        setConnected(true);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('❌ Socket disconnected');\n        setConnected(false);\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        setConnected(false);\n        toast.error('Connection failed. Please check your internet connection.');\n      });\n\n      // User status event handlers\n      newSocket.on('activeUsers', users => {\n        setOnlineUsers(users);\n      });\n      newSocket.on('userOnline', data => {\n        setOnlineUsers(prev => {\n          const filtered = prev.filter(u => u.userId !== data.userId);\n          return [...filtered, data];\n        });\n        toast.success(`${data.userInfo.name} is now online`, {\n          duration: 2000,\n          icon: '🟢'\n        });\n      });\n      newSocket.on('userOffline', data => {\n        setOnlineUsers(prev => prev.filter(u => u.userId !== data.userId));\n        toast(`${data.userInfo.name} went offline`, {\n          duration: 2000,\n          icon: '🔴'\n        });\n      });\n\n      // Message event handlers\n      newSocket.on('newMessage', data => {\n        setMessages(prev => [...prev, data.message]);\n\n        // Show notification if message is not from current user\n        if (data.message.sender._id !== user._id) {\n          toast.success(`New message from ${data.message.sender.name}`, {\n            duration: 3000,\n            onClick: () => {\n              // Navigate to chat if needed\n              window.location.href = `/chat/${data.chatId}`;\n            }\n          });\n        }\n      });\n      newSocket.on('messageNotification', data => {\n        if (data.sender._id !== user._id) {\n          toast.success(`📩 ${data.sender.name}: ${data.message.content || 'Sent a file'}`, {\n            duration: 4000,\n            onClick: () => {\n              window.location.href = `/chat/${data.chatId}`;\n            }\n          });\n        }\n      });\n\n      // Typing event handlers\n      newSocket.on('userTyping', data => {\n        if (data.userId !== user._id) {\n          setTypingUsers(prev => {\n            const filtered = prev.filter(u => u.userId !== data.userId);\n            return [...filtered, data];\n          });\n        }\n      });\n      newSocket.on('userStoppedTyping', data => {\n        setTypingUsers(prev => prev.filter(u => u.userId !== data.userId));\n      });\n\n      // Message read event handlers\n      newSocket.on('messagesRead', data => {\n        setMessages(prev => prev.map(msg => {\n          if (data.messageIds.includes(msg._id)) {\n            return {\n              ...msg,\n              isRead: true,\n              readAt: new Date()\n            };\n          }\n          return msg;\n        }));\n      });\n\n      // Error handlers\n      newSocket.on('error', data => {\n        console.error('Socket error:', data);\n        toast.error(data.message || 'Something went wrong');\n      });\n      return () => {\n        newSocket.close();\n      };\n    }\n  }, [user, token]);\n\n  // Join a chat room\n  const joinChat = chatId => {\n    if (socket && connected) {\n      socket.emit('joinChat', {\n        chatId\n      });\n    }\n  };\n\n  // Leave a chat room\n  const leaveChat = chatId => {\n    if (socket && connected) {\n      socket.emit('leaveChat', {\n        chatId\n      });\n    }\n  };\n\n  // Send a message\n  const sendMessage = messageData => {\n    if (socket && connected) {\n      socket.emit('sendMessage', messageData);\n      return true;\n    }\n    toast.error('Not connected. Please check your internet connection.');\n    return false;\n  };\n\n  // Send typing indicator\n  const sendTyping = (chatId, receiverId) => {\n    if (socket && connected) {\n      socket.emit('typing', {\n        chatId,\n        receiverId\n      });\n    }\n  };\n\n  // Send stop typing indicator\n  const sendStopTyping = (chatId, receiverId) => {\n    if (socket && connected) {\n      socket.emit('stopTyping', {\n        chatId,\n        receiverId\n      });\n    }\n  };\n\n  // Mark messages as read\n  const markMessagesAsRead = (chatId, messageIds) => {\n    if (socket && connected) {\n      socket.emit('markAsRead', {\n        chatId,\n        messageIds\n      });\n    }\n  };\n\n  // Get online status of a user\n  const isUserOnline = userId => {\n    return onlineUsers.some(user => user.userId === userId);\n  };\n\n  // Get typing users for a chat\n  const getTypingUsers = chatId => {\n    return typingUsers.filter(user => user.chatId === chatId);\n  };\n\n  // Clear messages (when switching chats)\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  // Add message to local state (for optimistic updates)\n  const addMessage = message => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  // Update message in local state\n  const updateMessage = (messageId, updates) => {\n    setMessages(prev => prev.map(msg => msg._id === messageId ? {\n      ...msg,\n      ...updates\n    } : msg));\n  };\n\n  // Remove message from local state\n  const removeMessage = messageId => {\n    setMessages(prev => prev.filter(msg => msg._id !== messageId));\n  };\n  const contextValue = {\n    socket,\n    connected,\n    onlineUsers,\n    messages,\n    typingUsers,\n    joinChat,\n    leaveChat,\n    sendMessage,\n    sendTyping,\n    sendStopTyping,\n    markMessagesAsRead,\n    isUserOnline,\n    getTypingUsers,\n    clearMessages,\n    addMessage,\n    updateMessage,\n    removeMessage\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"jKdsJzOjTf6/TWWoWHAKSQONpsA=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","toast","useAuth","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","onlineUsers","setOnlineUsers","messages","setMessages","typingUsers","setTypingUsers","connected","setConnected","user","token","newSocket","process","env","REACT_APP_SERVER_URL","auth","transports","on","console","log","id","error","users","data","prev","filtered","filter","u","userId","success","userInfo","name","duration","icon","message","sender","_id","onClick","window","location","href","chatId","content","map","msg","messageIds","includes","isRead","readAt","Date","close","joinChat","emit","leaveChat","sendMessage","messageData","sendTyping","receiverId","sendStopTyping","markMessagesAsRead","isUserOnline","some","getTypingUsers","clearMessages","addMessage","updateMessage","messageId","updates","removeMessage","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jyoti/codefiles/chat_app/frontend/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { toast } from 'react-hot-toast';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [connected, setConnected] = useState(false);\r\n  const { user, token } = useAuth();\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    if (user && token) {\r\n      const newSocket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:8000', {\r\n        auth: {\r\n          token: token\r\n        },\r\n        transports: ['websocket', 'polling']\r\n      });\r\n\r\n      setSocket(newSocket);\r\n\r\n      // Connection event handlers\r\n      newSocket.on('connect', () => {\r\n        console.log('✅ Socket connected:', newSocket.id);\r\n        setConnected(true);\r\n      });\r\n\r\n      newSocket.on('disconnect', () => {\r\n        console.log('❌ Socket disconnected');\r\n        setConnected(false);\r\n      });\r\n\r\n      newSocket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        setConnected(false);\r\n        toast.error('Connection failed. Please check your internet connection.');\r\n      });\r\n\r\n      // User status event handlers\r\n      newSocket.on('activeUsers', (users) => {\r\n        setOnlineUsers(users);\r\n      });\r\n\r\n      newSocket.on('userOnline', (data) => {\r\n        setOnlineUsers(prev => {\r\n          const filtered = prev.filter(u => u.userId !== data.userId);\r\n          return [...filtered, data];\r\n        });\r\n        toast.success(`${data.userInfo.name} is now online`, {\r\n          duration: 2000,\r\n          icon: '🟢'\r\n        });\r\n      });\r\n\r\n      newSocket.on('userOffline', (data) => {\r\n        setOnlineUsers(prev => prev.filter(u => u.userId !== data.userId));\r\n        toast(`${data.userInfo.name} went offline`, {\r\n          duration: 2000,\r\n          icon: '🔴'\r\n        });\r\n      });\r\n\r\n      // Message event handlers\r\n      newSocket.on('newMessage', (data) => {\r\n        setMessages(prev => [...prev, data.message]);\r\n        \r\n        // Show notification if message is not from current user\r\n        if (data.message.sender._id !== user._id) {\r\n          toast.success(`New message from ${data.message.sender.name}`, {\r\n            duration: 3000,\r\n            onClick: () => {\r\n              // Navigate to chat if needed\r\n              window.location.href = `/chat/${data.chatId}`;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      newSocket.on('messageNotification', (data) => {\r\n        if (data.sender._id !== user._id) {\r\n          toast.success(`📩 ${data.sender.name}: ${data.message.content || 'Sent a file'}`, {\r\n            duration: 4000,\r\n            onClick: () => {\r\n              window.location.href = `/chat/${data.chatId}`;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // Typing event handlers\r\n      newSocket.on('userTyping', (data) => {\r\n        if (data.userId !== user._id) {\r\n          setTypingUsers(prev => {\r\n            const filtered = prev.filter(u => u.userId !== data.userId);\r\n            return [...filtered, data];\r\n          });\r\n        }\r\n      });\r\n\r\n      newSocket.on('userStoppedTyping', (data) => {\r\n        setTypingUsers(prev => prev.filter(u => u.userId !== data.userId));\r\n      });\r\n\r\n      // Message read event handlers\r\n      newSocket.on('messagesRead', (data) => {\r\n        setMessages(prev => prev.map(msg => {\r\n          if (data.messageIds.includes(msg._id)) {\r\n            return { ...msg, isRead: true, readAt: new Date() };\r\n          }\r\n          return msg;\r\n        }));\r\n      });\r\n\r\n      // Error handlers\r\n      newSocket.on('error', (data) => {\r\n        console.error('Socket error:', data);\r\n        toast.error(data.message || 'Something went wrong');\r\n      });\r\n\r\n      return () => {\r\n        newSocket.close();\r\n      };\r\n    }\r\n  }, [user, token]);\r\n\r\n  // Join a chat room\r\n  const joinChat = (chatId) => {\r\n    if (socket && connected) {\r\n      socket.emit('joinChat', { chatId });\r\n    }\r\n  };\r\n\r\n  // Leave a chat room\r\n  const leaveChat = (chatId) => {\r\n    if (socket && connected) {\r\n      socket.emit('leaveChat', { chatId });\r\n    }\r\n  };\r\n\r\n  // Send a message\r\n  const sendMessage = (messageData) => {\r\n    if (socket && connected) {\r\n      socket.emit('sendMessage', messageData);\r\n      return true;\r\n    }\r\n    toast.error('Not connected. Please check your internet connection.');\r\n    return false;\r\n  };\r\n\r\n  // Send typing indicator\r\n  const sendTyping = (chatId, receiverId) => {\r\n    if (socket && connected) {\r\n      socket.emit('typing', { chatId, receiverId });\r\n    }\r\n  };\r\n\r\n  // Send stop typing indicator\r\n  const sendStopTyping = (chatId, receiverId) => {\r\n    if (socket && connected) {\r\n      socket.emit('stopTyping', { chatId, receiverId });\r\n    }\r\n  };\r\n\r\n  // Mark messages as read\r\n  const markMessagesAsRead = (chatId, messageIds) => {\r\n    if (socket && connected) {\r\n      socket.emit('markAsRead', { chatId, messageIds });\r\n    }\r\n  };\r\n\r\n  // Get online status of a user\r\n  const isUserOnline = (userId) => {\r\n    return onlineUsers.some(user => user.userId === userId);\r\n  };\r\n\r\n  // Get typing users for a chat\r\n  const getTypingUsers = (chatId) => {\r\n    return typingUsers.filter(user => user.chatId === chatId);\r\n  };\r\n\r\n  // Clear messages (when switching chats)\r\n  const clearMessages = () => {\r\n    setMessages([]);\r\n  };\r\n\r\n  // Add message to local state (for optimistic updates)\r\n  const addMessage = (message) => {\r\n    setMessages(prev => [...prev, message]);\r\n  };\r\n\r\n  // Update message in local state\r\n  const updateMessage = (messageId, updates) => {\r\n    setMessages(prev => prev.map(msg => \r\n      msg._id === messageId ? { ...msg, ...updates } : msg\r\n    ));\r\n  };\r\n\r\n  // Remove message from local state\r\n  const removeMessage = (messageId) => {\r\n    setMessages(prev => prev.filter(msg => msg._id !== messageId));\r\n  };\r\n\r\n  const contextValue = {\r\n    socket,\r\n    connected,\r\n    onlineUsers,\r\n    messages,\r\n    typingUsers,\r\n    joinChat,\r\n    leaveChat,\r\n    sendMessage,\r\n    sendTyping,\r\n    sendStopTyping,\r\n    markMessagesAsRead,\r\n    isUserOnline,\r\n    getTypingUsers,\r\n    clearMessages,\r\n    addMessage,\r\n    updateMessage,\r\n    removeMessage\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={contextValue}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}